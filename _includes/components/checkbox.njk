{# Nested Components ------------------------------------------------------------------------------------------------------------------- #}

{% from "components/_fieldParts.njk" import fieldLabel, fieldDescription, directionClasses, fieldStyles, fieldsetOptionStyles %}
{% from "snippets/loopAttrs.njk" import loopAttrs %}

{# Macro ------------------------------------------------------------------------------------------------------------------------------- #}

{% macro checkbox(props={}, attrs={}) %}

    <fieldset
        name="{{ props.name }}"
        class="{{ attrs.class }}"
        {{ loopAttrs(attrs) }}
    >
        <div class="{{ directionClasses["column"] }}">

            {% if props.label %}{{ fieldLabel({tag: "legend", fieldProps:props}) }}{% endif %}
            {% if props.description %}{{ fieldDescription(props) }}{% endif %}

            {% for option in props.options %}
                {# {% set inputData = { index: loop.index, value: option.value } %}
                {{ inputData | dump }} #}
                <div
                    x-data="{
                        data: {index: {{ loop.index}}, value: '{{ option.value }}' },
                        id: $id('{{ option.value }}'),
                        setChecked () {
                            const arr = {{ props.name }} {# the array is handled by the alpine state in form #}
                            {# const i = { index: {{ loop.index }} , value: '{{ option.value }}' } #}
                            return arr.includes(this.data) ? arr.splice(arr.indexOf(this.data), 1) : arr.push(this.data)
                        }
                    }"
                    class="flex gap-2">
                    <input
                        {# :checked="{{ props.name }}.includes({ index: {{ loop.index }}, value: '{{ option.value }}' }, 0)" #}
                        :checked="{{ props.name }}.includes(data)"
                        x-on:change="setChecked"
                        :id="id"
                        type="checkbox"
                        name="{{ props.name }}"
                        value="{{ option.value }}"
                        {{ loopAttrs(props.fieldAttrs) }}
                        class="accent-current w-[1.1em] h-[1.5em] shrink-0"/>
                    <label class="{{ fieldsetOptionStyles }}" :for="id">{{ option.label }}</label>
                </div>
            {% endfor %}
        </div>
    </fieldset>

{% endmacro %}

{# Component Documentation ------------------------------------------------------------------------------------------------------------- #}

{% set checkboxMeta = {
    args: '{{ checkbox(
    props={
        name: "",
        label: "",
        description: "",
        options: [{label: "", value: ""}],
        fieldAttrs: {}
    },
    attrs={}
) }}',
description: "
- If you want access to an array of the selected checkboxes, define a `x-data` value in a parent element with the key as the `props.name` of this component.
"
} %}
