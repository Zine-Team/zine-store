{#
    Dropdown

    @param triggerProps = {} // props for the button component that triggers the dropdown
    @param dropdownItems = [] // array of macros (objects) that should be rendered inside the dropdown panel
#}


{% from "components/button.njk" import button %}

{% macro dropdown(props={}, triggerProps = {}, dropdownItems = []) %}

{% set position %}
    {% if props.position.includes("top") %}
        bottom-full mb-2
    {% endif %}
    {% if props.position.includes("bottom") %}
        mt-2
    {% endif %}
    {% if props.position.includes("right") %}
        right-0
    {% endif %}
    {% if props.position.includes("left") %}
        left-0
    {% endif %}
{% endset %}

    <div
        x-data="{
            open: false,
            toggle() {
                if (this.open) {
                    return this.close()
                }
                this.$refs.button.focus()
                this.open = true
            },
            close(focusAfter) {
                if (! this.open) return
                this.open = false
                focusAfter && focusAfter.focus()
            },
        }"
        x-id="['dropdown']"
        x-on:keydown.escape.prevent.stop="close($refs.button)"
        x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
        class="relative max-w-fit"
    >
        {{ button(
            props=triggerProps,
            attrs={
                "x-ref": "button",
                "@click": "toggle()",
                ":aria-expanded": "open",
                ":aria-controls":"$id('dropdown')"
            })
        }}
        <div
            x-ref="panel"
            x-show="open"
            x-on:click.outside="close($refs.button)"
            x-cloak
            :id="$id('dropdown')"
            class="absolute min-w-max bg-white-smoke border border-dark-grey px-5 py-3 shadow-zine z-10 outline-none {{ position }}">
            <ul class="gap-item-sm list-disc flex flex-col items-start">
                {% if caller %}
                    {{ caller() | safe }}
                {% else %}
                    {% for item in dropdownItems %}
                        <li class="ml-[1.25ch]">{{ item.macro(item.props, item.attrs) }}</li>
                    {% endfor %}
                {% endif %}
            </ul>
        </div>
    </div>
{% endmacro %}
