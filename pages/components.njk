---
title: Components
---
{% from "components/_componentDocumentation.njk" import componentDocumentation %}
{% from "components/container.njk" import container, containerMeta %}
{% from "components/accordion.njk" import accordion, accordionMeta %}
{% from "components/announcementBanner.njk" import announcementBanner, announcementBannerMeta %}
{% from "components/button.njk" import button, buttonMeta %}
{% from "components/carousel.njk" import carousel, carouselMeta %}
{% from "components/copyToClipboard.njk" import copyToClipboard, copyToClipboardMeta %}
{% from "components/toaster.njk" import toaster, toasterMeta %}
{% from "components/input.njk" import input, inputMeta %}
{% from "components/select.njk" import select, selectMeta %}
{% from "components/textarea.njk" import textarea, textareaMeta %}
{% from "components/markdown.njk" import markdown, markdownMeta %}
{% from "components/marquee.njk" import marquee, marqueeMeta %}
{% from "components/dropdown.njk" import dropdown, dropdownMeta %}
{% from "components/radio.njk" import radio, radioMeta %}
{% from "components/checkbox.njk" import checkbox, checkboxMeta %}

{# Values ------------------------------------------------------------------------------------------------------------------------------ #}

{% set components = [
    "button",
    "accordion",
    "announcementBanner",
    "copyToClipboard",
    "carousel",
    "toaster",
    "input",
    "select",
    "textarea",
    "marquee",
    "dropdown",
    "markdown",
    "container",
    "radio",
    "checkbox"
] %}

{% set componentSelect = [] %}
{% for component in components | sort() %}
    {% set componentSelect = (componentSelect.push({value: component, label: component}), componentSelect) %}
{% endfor %}


{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call container({type:"sidebar", size:"base"},{
    "x-data":"{allComponents: ''}",
    "x-init":"$watch('allComponents', selected => document.getElementById(selected.value).scrollIntoView())",
    "class":"@container"
}) %}

    <aside class="sticky top-0 flex-col items-start hidden overflow-y-auto overscroll-contain lg:flex max-h-dvh h-fit py-dialog-block gap-section-title">
        <section class="flex flex-col items-start gap-item-sm">
            <h2 class="font-semibold">Guide</h2>
            <ul class="grid items-start list-disc gap-item-sm ml-indent">
                <li class="w-min">{{ button({label:"Intro", type: "link"},{href:"#intro"}) }}</li>
            </ul>
        </section>
        <section class="flex flex-col items-start gap-item-sm">
            {% call markdown({transform: false}) %}
                <h4 class="font-semibold">All components</h4>
                <ul>
                    {% for component in components | sort() %}
                        <li><a href="#{{ component }}">{{ component }}</li>
                    {% endfor %}
                </ul>
            {% endcall %}
        </section>
    </aside>

    {{ select(
        props={
            "name": "allComponents",
            "options": componentSelect,
            fieldAttrs:{
                placeholder: "Scroll to a component..."
            }
        },
        attrs={
            "class": "lg:hidden py-nav border-b border-dotted border-neutral-lighter sticky top-0 z-40 bg-surface"
        })
    }}

    <div class="border-dotted justify-items-center lg:pl-site-inline lg:border-l border-neutral-lighter">
        <div class="max-w-narrow">

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

<section id="intro" class="grid w-full border-b border-dotted border-neutral-lighter mt-dialog-block pb-dialog-block gap-section-title max-w-[var(--container-sm)] max-lg:scroll-m-section">
    <h3 class="text-xl truncate xl:list-disc xl:list-item">Intro</h3>
    <div class="flex flex-col gap-item-sm">
        {# <h3 class="text-base font-semibold">Intro</h3> #}
        {% call markdown({transform: true}, {class:"w-full max-w-[var(--container-sm)]"}) %}
Welcome to the design system!

This component system is made with macros from [Nunjucks](https://mozilla.github.io/nunjucks/templating.html).

All components have a `props` argument and a `attrs` argument, both of which are objects.

* `props` contains all the values needed to make the component function, like the label and style of a button.
* `attrs` is for any HTML attributes that the instance of the component requires.
        {% endcall %}
    </div>
</section>

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "accordion",
    meta: accordionMeta
}) %}
    {{ accordion({accordionItems:[
        {"isOpen": true, title: "Capitalists", description: "The very small ruling class upon whose interests and competition the system is based. Their massive wealths are obtained  through profiting off other people’s labor."},
        {title: "Managerial State", description: "The structures in place to maintain the functioning of The State and to protect it from economic crises, often caused by Capitalists acting in self-interested ways."},
        {title: "Armed State", description: "Violent force used by The State to maintainits power. Under Racial Capitalism, The State is the sole entity justified in using violence, violence it uses to dispossess The People of their land, resources, and labor to protectand serve the interests of the Capitalists. The Armed State promotes and relies on racist ideology to demonize and criminalize people of color in order to enforce a racial division of labor. Such divisions allow forthe extreme exploitation of selected groups’ labor and keep The People turned againstone another."},
        {title: "Concessions State", description: "Reforms to the system made by The State in response to the demands of The People. While crucial to improving the lives and conditions of the The People, reforms that don’t challenge the nature of the system are often co-opted to make Racial Capitalismfeel more acceptable and friendly without fundamentally changing its power dynamics. The Concessions State also prescribes theonly legitimate avenues to express dissent (voting and emailing your representatives) and suppresses and vilifies all others (organized labor strikes or squatting)."},
        {title: "Civil Society", description: "Ideas, beliefs, values, and culture that shape how we see ourselves, each other, and the wealthy. Although Civil Society is not controlled by The State, the institutions that constitute it are heavily influenced by the ideologies and forces of Racial Capitalism."},
        {title: "The People", description: "The humans whose labor Racial Capitalism exploits. When The People come together with a shared understanding of their conditions, they can build the power needed to transform the systems they live under."}
    ]},{class:"w-full"}) }}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "announcementBanner",
    meta: announcementBannerMeta
}) %}
    {{ announcementBanner({content:"This is the banner contents. [markdown!](/)", storageKey:"example-announcement-banner"}) }}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "button",
    meta: buttonMeta
}) %}
    <div class="grid grid-cols-2 gap-item place-items-center">
        {{ button({label: "Button", type: "button", size: "base"}) }}
        {{ button({label: "Small", type: "button", size:"sm"}) }}
        {{ button({label: "Link", type: "link", size: "base"}) }}
        {{ button({label: "Large", type: "link", size:"lg"}) }}
    </div>
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "carousel",
    meta: carouselMeta
}) %}
    {% call carousel({},{class:"w-full h-40 gap-2"}) %}
        <div class="w-[100cqi] grid place-items-center text-lg bg-neutral-lighter">Hehe</div>
        <div class="w-[100cqi] grid place-items-center text-lg bg-neutral-lighter">Haha</div>
        <div class="w-[100cqi] grid place-items-center text-lg bg-neutral-lighter">Hoohoo</div>
    {% endcall %}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "checkbox",
    meta: checkboxMeta
}) %}
    <div
        x-data="{checkboxes: []}"
        class="w-full flex flex-col gap-section-title">
        {{ checkbox(
            props={
                name: "checkboxes",
                label: "Checkboxes",
                description: "Optional description",
                options: [{label: "Option 1", value: "You selected option 1!"},{label: "Option 2", value: "You selected option 2!"},{label: "Option 3", value: "You selected option 3!"}],
                fieldAttrs: {}
            },
            attrs={}
        ) }}
        {% call markdown(
            props={transform: false},
            attrs={class:"relative w-[calc(100%+2*var(--space-dialog-inline))] -bottom-[var(--space-dialog-inline)] -left-[var(--space-dialog-inline)] -right-[var(--space-dialog-inline)]"}
        ) %}
        <pre>
<code>output: <span x-show="!checkboxes">[]</span><span x-show="checkboxes"><span x-text="JSON.stringify(checkboxes)"></span></span>
</code></pre>
        {% endcall %}
    </div>
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{{ componentDocumentation({
    title: "container",
    meta: containerMeta
}) }}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "copyToClipboard",
    meta: copyToClipboardMeta
}) %}
    {% call copyToClipboard({
        input: 'hey!',
        toastMessage: "Paste to see that it worked :)"
    }) %}
        {{ button({label: "Click to copy 'hey!'", type: "button", size:"base"}, {@click: "copy"}) }}
    {% endcall %}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "dropdown",
    meta: dropdownMeta
}) %}
    {{ dropdown(
        props={
            position:["top", "left"],
            dropdownItems:[
                { macro: button, props:{label:"Some", type:"link", size:"base"} },
                { macro: button, props:{label:"Buttons", type:"link", size:"base"} },
                { macro: button, props:{label:"Inside", type:"link", size:"base"} }
            ]
        },
        triggerProps={label: "Dropdown", type: "button", size:"base"}
    )}}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "input",
    meta: inputMeta
}) %}
    <div
        x-data="{input: ''}"
        class="w-full flex flex-col gap-section-title">

        {{ input(props={
            name: "input",
            label: "Input",
            description: "Optional description",
            fieldAttrs:{
                type: "text",
                placeholder: "Placeholder",
                required: true
            }
        },
        attrs={
            class:"w-full"
        }) }}

        {% call markdown(
            props={transform: false},
            attrs={class:"relative w-[calc(100%+2*var(--space-dialog-inline))] -bottom-[var(--space-dialog-inline)] -left-[var(--space-dialog-inline)] -right-[var(--space-dialog-inline)]"}
        ) %}
        <pre>
<code>output: <span x-show="!input">""</span><span x-show="input"><span x-text="JSON.stringify(input)"></span></span>
</code></pre>
        {% endcall %}
    </div>
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "markdown",
    meta: markdownMeta
}) %}
    {% call markdown({transform: true}) %}
## Heading

Body paragraph with a [link](#) and _italics_ and **bold**.

```
preformatted code
```
* an
* unordered
* list

    {% endcall %}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "marquee",
    meta: marqueeMeta
}) %}
    {% call marquee({speed: "10s", pauseOnHover: true, fadeEdges: true}, {class:"w-full"}) %}
        <div class="text-lg">This is a repeating message!</div>
    {% endcall %}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "radio",
    meta: radioMeta
}) %}
    <div
        x-data="{radio: ''}"
        class="w-full flex flex-col gap-section-title">
        {{ radio(
            props={
                name: "radio",
                label: "Radio",
                description: "Optional description",
                options: [{label: "Option 1", value: "You selected option 1!"},{label: "Option 2", value: "You selected option 2!"},{label: "Option 3", value: "You selected option 3!"}],
                fieldAttrs: {}
            },
            attrs={}
        ) }}
        {% call markdown(
            props={transform: false},
            attrs={class:"relative w-[calc(100%+2*var(--space-dialog-inline))] -bottom-[var(--space-dialog-inline)] -left-[var(--space-dialog-inline)] -right-[var(--space-dialog-inline)]"}
        ) %}
        <pre>
<code>output: <span x-show="!radio">{}</span><span x-show="radio"><span x-text="JSON.stringify(radio)"></span></span>
</code></pre>
        {% endcall %}
    </div>
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "select",
    meta: selectMeta
}) %}
    <div
        x-data="{select: ''}"
        class="w-full flex flex-col gap-section-title">
        {{ select(
            {
            "name": "select",
            "label": "Select",
            "options": [
                {label: 'Option 1', value: 'You selected option 1!'},
                {label: 'Option 2', value: 'You selected option 2!'},
                {label: 'Option 3', value: 'You selected option 3!'}
            ],
            fieldAttrs: {
                "required": true,
                "placeholder": "Placeholder"
            },
            "description": "This area describes the field above!"
            },{class:"w-full"})
        }}
        {% call markdown(
                props={transform: false},
                attrs={class:"relative w-[calc(100%+2*var(--space-dialog-inline))] -bottom-[var(--space-dialog-inline)] -left-[var(--space-dialog-inline)] -right-[var(--space-dialog-inline)]"}
            ) %}
            <pre>
{# <code>output: {<span x-show="select">index: <span x-text="select.index"></span>, value: <span x-text="select.value"></span></span>} #}
<code>output: <span x-show="!select">{}</span><span x-show="select"><span x-text="JSON.stringify(select)"></span></span>
</code></pre>
        {% endcall %}
    </div>
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "textarea",
    meta: textareaMeta
}) %}
    <div
        x-data="{textarea: ''}"
        class="w-full flex flex-col gap-section-title">
        {{ textarea(
            {
                name: "textarea",
                label: "Textarea",
                description: "Optional description",
                fieldAttrs: {
                    rows: "5",
                    required: true,
                    placeholder: "Type something here..."
                }
            }, {class:"w-full"}
        ) }}
        {% call markdown(
            props={transform: false},
            attrs={class:"relative w-[calc(100%+2*var(--space-dialog-inline))] -bottom-[var(--space-dialog-inline)] -left-[var(--space-dialog-inline)] -right-[var(--space-dialog-inline)]"}
        ) %}
        <pre>
<code>output: <span x-show="!textarea">""</span><span x-show="textarea"><span x-text="JSON.stringify(textarea)"></span></span>
</code></pre>
        {% endcall %}
    </div>
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% call componentDocumentation({
    title: "toaster",
    meta: toasterMeta
}) %}
    {{ button({label: "Click to trigger a toast", type: "button", size:"base"}, {"@click": "$dispatch('notify', { content:`Hello! I am Toast!`, toasterId:'toaster' })"}) }}
{% endcall %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

        </div>
    </div>

{% endcall %}
